USE AdventureWorks2019

/* Identify top 20 best selling product based on revenue */

SELECT 
	DISTINCT sod.ProductID, 
	pp.Name,
	pp.ProductNumber,
	pp.ProductLine,
	sod.OrderQty,
	sod.UnitPrice,
	sod.UnitPrice * (1 - sod.UnitPriceDiscount) * sod.OrderQty  AS TotalRevenue
FROM Sales.SalesOrderDetail AS sod
LEFT JOIN Production.Product AS pp ON sod.ProductID = pp.ProductID
ORDER BY TotalRevenue DESC
OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY;

/* Identify worst selling product based on revenue */

SELECT 
	DISTINCT sod.ProductID, 
	pp.Name,
	pp.ProductNumber,
	pp.ProductLine,
	sod.OrderQty,
	sod.UnitPrice,
	sod.UnitPrice * (1 - sod.UnitPriceDiscount) * sod.OrderQty  AS TotalRevenue
FROM Sales.SalesOrderDetail AS sod
LEFT JOIN Production.Product AS pp ON sod.ProductID=pp.ProductID
ORDER BY TotalRevenue ASC
OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY;

/* Identify Customers who have made repeated purchase in the past 12 months
Analyse seaseonal trends in purchase using SalesOrderHeader and Sales OrderDetails tables */

WITH AllCustomers AS (
    SELECT 
        BusinessEntityID,
        CONCAT(FirstName, ' ',
               ISNULL(MiddleName, ''), ' ',
               LastName) AS CustomerName
    FROM Person.Person

    UNION ALL

    SELECT 
        BusinessEntityID,
        Name AS CustomerName
    FROM Sales.Store
)
SELECT
    soh.CustomerID,
	ac.CustomerName,
	COUNT(soh.SalesOrderID) AS TotalOrders,
    MAX(soh.OrderDate) AS FirstPurchase,
	MIN(soh.OrderDate) AS LastPurchase
FROM Sales.SalesOrderHeader AS soh
LEFT JOIN AllCustomers AS ac
    ON soh.CustomerID = ac.BusinessEntityID
WHERE soh.OrderDate >= DATEADD(YEAR, -1, 2014) AND ac.CustomerName IS NOT NULL
GROUP BY soh.customerID, ac.CustomerName
HAVING COUNT(DISTINCT soh.SalesOrderID) > 1
ORDER BY TotalOrders DESC;

/*Overall Sales Volume and Revenue Patterns
identify order count, Total quantity sold per month and revenue generated by month*/

SELECT 
	YEAR(soh.OrderDate) AS Yr,
	MONTH(soh.OrderDate) AS Mth,
	SUM(sod.OrderQty) AS TotalOrder,
	SUM(soh.TotalDue) AS Revenue
FROM Sales.SalesOrderHeader AS soh
LEFT JOIN Sales.SalesOrderDetail AS sod 
	ON soh.SalesOrderID = sod.SalesOrderID
GROUP BY YEAR(soh.OrderDate), MONTH(soh.OrderDate)
ORDER BY Yr DESC, Mth DESC;

/* Product Category Seasonality
Identify trends of sales by product categories and subcategories in each season */

SELECT
	pc.Name AS category,
	ps.Name AS subcategory,
	DATENAME(QUARTER, soh.OrderDate) AS quarter,
	SUM(sod.OrderQty) AS units_sold,
	SUM(sod.LineTotal) AS salesamount
FROM Sales.SalesOrderDetail AS sod
LEFT JOIN Sales.SalesOrderHeader AS soh
ON sod.SalesOrderID = soh.SalesOrderID
	LEFT JOIN Production.Product AS pp
	ON sod.ProductID = pp.ProductID
		LEFT JOIN Production.ProductSubcategory ps
		ON pp.ProductSubcategoryID = ps.ProductSubcategoryID
			LEFT JOIN Production.ProductCategory AS pc
			ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name, DATENAME(QUARTER, soh.OrderDate), pp.Name, ps.Name 
ORDER BY category ASC, quarter ASC;

/* Deos discount affect sales? */

SELECT
	YEAR(soh.OrderDate) AS Year,
	MONTH(soh.OrderDate) AS Month,
	DATENAME(QUARTER, soh.OrderDate) AS Qtr,
	pc.Name As Category,
	SUM(sod.OrderQty) AS TotalOrder,
	SUM(sod.OrderQty * sod.UnitPriceDiscount) AS TotalDiscount,
	AVG(sod.UnitPriceDiscount) AS AvgDiscount,
	SUM(soh.TotalDue) AS Revenue
FROM Sales.SalesOrderHeader AS soh
LEFT JOIN Sales.SalesOrderDetail AS sod
	ON soh.SalesOrderID = sod.SalesOrderID
	LEFT JOIN Production.Product AS pp
	ON sod.ProductID = pp.ProductID
	LEFT JOIN Production.ProductSubcategory ps
		ON pp.ProductSubcategoryID = ps.ProductSubcategoryID
			LEFT JOIN Production.ProductCategory AS pc
			ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY YEAR(soh.OrderDate), MONTH(soh.OrderDate), pc.Name, DATENAME(QUARTER, soh.OrderDate)
ORDER BY Year, Month, Revenue;

/* Determine if delay in shipping vary by season/month  */

SELECT
	MONTH(soh.OrderDate) AS month,
	DATENAME(QUARTER, soh.OrderDate) AS Qtr,
	AVG(DATEDIFF(DAY, soh.OrderDate, soh.ShipDate)) AS avgshipdelay,
	AVG(soh.Freight) AS avgfrieghtcost
FROM Sales.SalesOrderHeader AS soh
GROUP BY MONTH(soh.OrderDate), DATENAME(QUARTER, soh.OrderDate)
ORDER BY Qtr, month;

/* Sales by Region and Channel */

SELECT
	st.Name AS territory,
	st.[Group] AS territorygroup,
	DATENAME(QUARTER, soh.OrderDate) AS Qtr,
	SUM(sod.OrderQty) AS unitsold,
	SUM(soh.TotalDue) AS revenue,
	COUNT(CASE WHEN soh.OnlineOrderFlag = 0 THEN 0 END) AS saleperson_channel,
	COUNT(CASE WHEN soh.OnlineOrderFlag = 1 THEN 1 END) AS online_order_channel
FROM Sales.SalesOrderDetail AS sod
LEFT JOIN Sales.SalesOrderHeader AS soh
	ON sod.SalesOrderID = soh.SalesOrderID
	LEFT JOIN Sales.SalesTerritory AS st
	ON soh.TerritoryID = st.TerritoryID
GROUP BY st.Name, st.[Group], DATENAME(QUARTER, soh.OrderDate)
ORDER BY territory, Qtr, revenue;

/* Regional Performance: revenue generated from Different Region, highlighting top performing region and underperforming region */

SELECT
	st.Name AS Region,
	st.[Group] AS Regiongroup,
	DATENAME(QUARTER, soh.OrderDate) AS Qtr,
	SUM(soh.TotalDue) AS revenue
FROM Sales.SalesOrderHeader AS soh
	LEFT JOIN Sales.SalesTerritory AS st
	ON soh.TerritoryID = st.TerritoryID
GROUP BY st.Name, st.[Group], DATENAME(QUARTER, soh.OrderDate)
ORDER BY revenue DESC;


--Top performing Regions

SELECT TOP 3
	st.Name AS Region,
	st.[Group] AS Regiongroup,
	SUM(soh.TotalDue) AS revenue
FROM Sales.SalesOrderHeader AS soh
	LEFT JOIN Sales.SalesTerritory AS st
	ON soh.TerritoryID = st.TerritoryID
GROUP BY st.Name, st.[Group]
ORDER BY revenue DESC;

--Underperforming Regions
SELECT
	st.Name AS Region,
	st.[Group] AS Regiongroup,
	SUM(soh.TotalDue) AS revenue
FROM Sales.SalesOrderHeader AS soh
	LEFT JOIN Sales.SalesTerritory AS st
	ON soh.TerritoryID = st.TerritoryID
GROUP BY st.Name, st.[Group]
ORDER BY revenue ASC
OFFSET 0 ROWS FETCH FIRST 3 ROWS ONLY;


/* Profit Margin and Discount */

SELECT DISTINCT 
	pp.Name AS productname,
	sod.UnitPrice,
	sod.UnitPriceDiscount,
	pp.StandardCost,
	(sod.UnitPrice * (1-sod.UnitPriceDiscount)) AS discountedprice,
	(sod.UnitPrice * (1-sod.UnitPriceDiscount)) - pp.StandardCost AS profitmargin
FROM Production.Product AS pp
LEFT JOIN Sales.SalesOrderDetail AS sod
	ON pp.ProductID = sod.ProductID
WHERE sod.UnitPriceDiscount >= 0.1
ORDER BY profitmargin ASC;

/* Inventory Health Check */

SELECT 
    p.Name,
    pi.Quantity,
    SUM(sd.OrderQty) AS TotalDemand
FROM Production.ProductInventory pi
JOIN Production.Product p ON pi.ProductID = p.ProductID
JOIN Sales.SalesOrderDetail sd ON sd.ProductID = p.ProductID
GROUP BY p.Name, pi.Quantity
HAVING pi.Quantity < 50 AND SUM(sd.OrderQty) > 500;


